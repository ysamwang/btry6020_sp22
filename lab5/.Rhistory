?lmtest::bptest
coeftest(mod2)
# number of times we'll repeat the experiment
sim.size <- 500
n <- 20
# where we will record relevant statistics
rec <- matrix(0, sim.size, 6)
colnames(rec) <- c("Normal Coverage", "Percentile Coverage", "Bca Coverage",
"Normal length", "Percentile length", "Bca length")
for(i in 1:sim.size){
# draw fresh data
X <- rexp(n)
# calculate the 3 different confidence intervals
boot.output <- boot(data = X, statistic = med.boot, R = 500)
ci.output <- boot.ci(boot.output, conf = .95, type = c("norm", "perc", "bca"))
# check if log(2) is in the normal CI
rec[i, 1] <- ci.output$normal[2] < log(2) & ci.output$normal[3] > log(2)
# record size of CI
rec[i, 4] <- ci.output$normal[3] - ci.output$normal[2]
# check if log(2) is in the percentile CI
rec[i, 2] <- ci.output$perc[4] < log(2) & ci.output$perc[5] > log(2)
rec[i, 5] <- ci.output$perc[5] - ci.output$perc[4]
# check if log(2) is in the percentile CI
rec[i, 3] <- ci.output$bca[4] < log(2) & ci.output$bca[5] > log(2)
rec[i, 6] <- ci.output$bca[5] - ci.output$bca[4]
}
library("lmboot")
install.packages("lmboot")
?paired.boot
#install.packages("lmboot")
library("lmboot")
?paired.boot
Y <- rnorm(n)
X <- matrix(rnorm(n *p), n, p)
X <- matrix(rnorm(n *p), n, p)
#install.packages("lmboot")
library("lmboot")
n <- 100; p <- 4
X <- matrix(rnorm(n *p), n, p)
Y <- rnorm(n)
paired.boot(Y ~ X, B = 1000 )
?paired.boot
#install.packages("lmboot")
library("lmboot")
n <- 100; p <- 4
X <- matrix(rnorm(n *p), n, p)
Y <- rnorm(n)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(Y ~ X, B = 1000 )
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(Y ~ X, B = 1000 )
?paired.boot
lm(Y~X)
confint(lm(Y~X))
### Get estimates of
apply(paired.output, MAR = 2, FUN = sd)
#install.packages("lmboot")
library("lmboot")
n <- 100; p <- 4
X <- matrix(rnorm(n *p), n, p)
Y <- rnorm(n)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(Y ~ X, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(Y ~ X, B = 1000)
### Get estimates of
apply(paired.output, MAR = 2, FUN = sd)
paired.output
apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
### Get standard deviation of the bootstrapped estimates
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
wild.se
paired.pct <- apply(paired.output$bootEstParam, MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam, MAR = 2, FUN = quantile, prob = c(.025, .975))
paired.pct
paired.pct
paired.pct
wild.pct
confint(lm(Y~X))
paired.se
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
#install.packages("lmboot")
library("lmboot")
n <- 100; p <- 4
X <- matrix(rnorm(n *p), n, p)
Y <- rnorm(n)
mod <- lm(Y~X)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(Y ~ X, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(Y ~ X, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
paired.pct
wild.pct
confint(mod)
#install.packages("lmboot")
library("lmboot")
n <- 100; p <- 4
X <- matrix(rnorm(n *p), n, p)
Y <- rnorm(n)
mod <- lm(Y~X)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(Y ~ X, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(Y ~ X, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
t(paired.pct)
t(wild.pct)
confint(mod)
setwd("~/Dropbox/teaching/BTRY_6020/labs/lab5")
read.csv("university.csv")
dat <- read.csv("university.csv")
head(dat)
hist(gpa)
hist(dat$gpa)
pairs(dat$gpa)
pairs(dat[, -1])
mod <- lm(gpa ~ rank*factor(year) + act*factor(year), data = dat)
mod
summary(mod)
mod <- lm(gpa ~ rank+ act +year, data = dat)
summary(mod)
univ_data <- read.csv("university.csv")
#install.packages("lmboot")
library("lmboot")
n <- 100; p <- 4
X <- matrix(rnorm(n *p), n, p)
Y <- rnorm(n)
mod <- lm(gpa ~ rank+ act +year, data = univ_data)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
t(paired.pct)
t(wild.pct)
confint(mod)
#install.packages("lmboot")
library("lmboot")
univ_data <- read.csv("university.csv")
univ_data <- univ_data[1:100,]
mod <- lm(gpa ~ rank+ act +year, data = univ_data)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
#install.packages("lmboot")
library("lmboot")
univ_data <- read.csv("university.csv")
univ_data <- univ_data[sample(nrow(univ_data), size = 100),]
mod <- lm(gpa ~ rank+ act +year, data = univ_data)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
t(paired.pct)
t(wild.pct)
confint(mod)
#install.packages("lmboot")
library("lmboot")
univ_data <- read.csv("university.csv")
univ_data <- univ_data[sample(nrow(univ_data), size = 500),]
mod <- lm(gpa ~ rank+ act +year, data = univ_data)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(gpa ~ rank+ act +year, data = univ_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
t(paired.pct)
t(wild.pct)
confint(mod)
univ_data <- read.csv("ischemic.csv")
# install.packages("lmboot")
library("lmboot")
univ_data <- read.csv("ischemic.csv")
mod <- lm(cost ~ *, data = univ_data)
univ_data <- read.csv("ischemic.csv")
univ_data
univ_data <- read.csv("ischemic.csv")
univ_data
head(univ_data)
univ_data <- read.csv("ischemic.csv")
head(univ_data)
read.csv("ischemic.csv")
read.csv("~/Dropbox/teaching/BTRY_6020/lectures/model_violations/ischemic.csv")
# install.packages("lmboot")
library("lmboot")
univ_data <- read.csv("~/Dropbox/teaching/BTRY_6020/labs/lab5/ischemic.csv")
head(univ_data)
mod <- lm(cost ~ *, data = univ_data)
univ_data <- read.csv("~/Dropbox/teaching/BTRY_6020/labs/lab5/ischemic.csv")
head(univ_data)
univ_data <- read.csv("~/Downloads/ischemic.csv")
univ_data
dat <- read.csv("~/Downloads/ischemic.csv")
dat
View(dat)
names(dat)
heart_data
heart_data <- read.csv("~/Downloads/ischemic.csv")
names(heart_data)
mod <- lm(cost ~ age + gender + interventions + drugs + er + complications + comorbidities + duration, data = heart_data)
summary(mod)
# install.packages("lmboot")
library("lmboot")
heart_data <- read.csv("~/Downloads/ischemic.csv")
names(heart_data)
mod <- lm(cost ~ age + gender + interventions + drugs + er + complications + comorbidities + duration,
data = heart_data)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(cost ~ age + gender + interventions + drugs + er + complications + comorbidities + duration,
data = heart_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(cost ~ age + gender + interventions + drugs + er + complications + comorbidities + duration,
data = heart_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
t(paired.pct)
t(wild.pct)
confint(mod)
pairs(heart_data)
heart_data
pairs(heart_data)
names(heart_data)
head(heart_data)
knitr::opts_chunk$set(echo = TRUE)
heart_data <- read.csv("~/Downloads/ischemic.csv")
names(heart_data)
head(heart_data)
heart_data[[1]]
heart_data <- data.frame(read.csv("~/Downloads/ischemic.csv"))
heart_data
heart_data <- unlist(read.csv("~/Downloads/ischemic.csv"))
heart_data
heart_data <- read.csv("~/Downloads/ischemic.csv")
heart_data[,1]
heart_data[,2]
heart_data[,3]
heart_data[,4]
heart_data[,5]
heart_data[,6]
Prestige <-read.table("http://socserv.socsci.mcmaster.ca/jfox/books/Companion/data/Prestige.txt", header=TRUE)
Prestige
names(Prestige)
table(Prestige$income)
table(Prestige$women)
table(Prestige$census)
mod <- lm(prestige ~ income + women + type,
data = Prestige)
mod
table(Prestige$type)
mod <- lm(prestige ~ income + women + type,
data = Prestige)
mod
mod <- lm(prestige ~ income + women + type,
data = Prestige)
summary(mod)
mod
summary(mod)
mod <- lm(prestige ~ log(income) + women + type,
data = Prestige)
summary(mod)
# install.packages("lmboot")
library("lmboot")
Prestige <-read.table("http://socserv.socsci.mcmaster.ca/jfox/books/Companion/data/Prestige.txt", header=TRUE)
names(Prestige)
mod <- lm(prestige ~ log(income) + women + type,
data = Prestige)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(prestige ~ log(income) + women + type,
data = Prestige, B = 1000)
?na.omit
Prestige <- na.omit(Prestige)
# install.packages("lmboot")
library("lmboot")
Prestige <-read.table("http://socserv.socsci.mcmaster.ca/jfox/books/Companion/data/Prestige.txt", header=TRUE)
Prestige <- na.omit(Prestige)
mod <- lm(prestige ~ log(income) + women + type,
data = Prestige)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(prestige ~ log(income) + women + type,
data = Prestige, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(prestige ~ log(income) + women + type,
data = Prestige, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
t(paired.pct)
t(wild.pct)
confint(mod)
fileName <- url("https://raw.githubusercontent.com/ysamwang/btry6020_sp22/main/lectureData/estate.csv")
housing_data <- read.csv(fileName)
housing_data
names(housing_data)
# Model based confidence interval
coefci(mod, level = .95)
library("lmtests")
library("lmtest")
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
## Form the confidence intervals using the normal approximation
# but SE's estimated via bootstrap
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
# Percentile bootstrap
t(paired.pct)
t(wild.pct)
# Model based confidence interval
coefci(mod, level = .95)
coefci(mod, level = .95, vcov. = vcovHC(mod, type = "HC3"))
library("sandwich")
coefci(mod, level = .95, vcov. = vcovHC(mod, type = "HC3"))
# Model based confidence interval
coefci(mod, level = .95)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
## Form the confidence intervals using the normal approximation
# but SE's estimated via bootstrap
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
# Percentile bootstrap
t(paired.pct)
t(wild.pct)
# Model based confidence interval
coefci(mod, level = .95)
coefci(mod, level = .95, vcov. = vcovHC(mod, type = "HC3"))
# install.packages("lmboot")
library("lmboot")
fileName <- url("https://raw.githubusercontent.com/ysamwang/btry6020_sp22/main/lectureData/estate.csv")
housing_data <- read.csv(fileName)
names(housing_data)
mod <- lm(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data)
summary(mod)
# install.packages("lmboot")
library("lmboot")
fileName <- url("https://raw.githubusercontent.com/ysamwang/btry6020_sp22/main/lectureData/estate.csv")
housing_data <- read.csv(fileName)
names(housing_data)
mod <- lm(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data)
summary(mod)
## Gives list of parameter estimates from each empirical bootstrap
# (or paired boostrap) resample
paired.output <- paired.boot(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data, B = 1000)
## Gives list of parameter estimates from each wild bootstrap  resample
wild.output <- wild.boot(log(price) ~ log(area) + bed + bath + garage + quality,
data = housing_data, B = 1000)
## Apply takes a function (FUN) and applies it to each row or column
## of a matrix
## MAR = 1, applies the function to each row
## MAR = 2, applies the function to each column
## Get standard deviation of each column (which corresponds to the bootstrap estimates)
paired.se <- apply(paired.output$bootEstParam, MAR = 2, FUN = sd)
wild.se <- apply(wild.output$bootEstParam, MAR = 2, FUN = sd)
## Get .025 and .975 quantiles of each column
paired.pct <- apply(paired.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
wild.pct <- apply(wild.output$bootEstParam,
MAR = 2, FUN = quantile, prob = c(.025, .975))
## Form the confidence intervals using the normal approximation
# but SE's estimated via bootstrap
cbind(mod$coef -1.96 * paired.se, mod$coef + 1.96 * paired.se)
cbind(mod$coef -1.96 * wild.se, mod$coef + 1.96 * wild.se)
# Percentile bootstrap
t(paired.pct)
t(wild.pct)
# Model based confidence interval
coefci(mod, level = .95)
coefci(mod, level = .95, vcov. = vcovHC(mod, type = "HC3"))
